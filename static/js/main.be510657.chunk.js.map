{"version":3,"sources":["pages/starships/starships.sass","pages/home/home.sass","assets/1.jpg","assets/2.jpg","assets/3.jpg","assets/4.jpg","assets/5.jpg","assets/6.jpg","assets/7.jpg","assets/124129.jpg","App.sass","pages/home/index.js","pages/starships/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","container","starship","modal","modalbox","movie","__webpack_require__","p","App","posters","1","episode1","2","episode2","3","episode3","4","episode4","5","episode5","6","episode6","7","episode7","Home","_useState","useState","_useState2","Object","slicedToArray","movies","setMovies","useEffect","fetch","concat","process","then","response","json","react_default","a","createElement","className","styles","map","_ref","id","episode","Link","key","to","style","backgroundImage","Starships","props","match","params","starships","setStarships","_useState3","_useState4","setModal","_useState5","_useState6","setStarship","handleModal","onClick","starshipName","model","passengers","pilot","starshipId","background","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be510657.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"wex2iqWOvaNG2U2arhwHc\",\"starship\":\"_383UHJ7fKIEazZGfZcUYYw\",\"modal\":\"_2d153TqYDOm_uZvfqz8as1\",\"modalbox\":\"_1a-8jks5QKIPZDZDJyHJ3h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"_1YL4UAxvte0RJD14strIGN\",\"movie\":\"_51ht1azB4aaF7zK-Xd-Cg\"};","module.exports = __webpack_public_path__ + \"static/media/1.0f3d0156.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.19f2d33d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.32c99cf6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.f01b97ff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.0cbc0e3c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.c41d1fb5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.bc07c078.jpg\";","module.exports = __webpack_public_path__ + \"static/media/124129.2404a29e.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"_5q6kWXEv0s-M4iewf-hj\"};","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './home.sass';\n\nimport episode1 from '../../assets/1.jpg';\nimport episode2 from '../../assets/2.jpg';\nimport episode3 from '../../assets/3.jpg';\nimport episode4 from '../../assets/4.jpg';\nimport episode5 from '../../assets/5.jpg';\nimport episode6 from '../../assets/6.jpg';\nimport episode7 from '../../assets/7.jpg';\n\nconst posters = {\n  1: episode1,\n  2: episode2,\n  3: episode3,\n  4: episode4,\n  5: episode5,\n  6: episode6,\n  7: episode7,\n};\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API}/swapi/movie/list`)\n      .then(response => response.json())\n      .then(setMovies);\n  }, []);\n\n  return (\n    <div className={styles.container}>\n      <h1>Star Wars Movies</h1>\n      {movies.map(({ id, episode }) => {\n        return (\n          <Link\n            key={id}\n            className={styles.movie}\n            to={`/starships/${episode}`}\n            style={{ backgroundImage: `url(${posters[episode]})` }}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './starships.sass';\n\nconst Starships = props => {\n  const { episode } = props.match.params;\n  const [starships, setStarships] = useState([]);\n  const [modal, setModal] = useState(false);\n  const [starship, setStarship] = useState({});\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API}/swapi/starship/list/${episode}`)\n      .then(response => response.json())\n      .then(setStarships);\n  }, []);\n\n  const handleModal = starship => {\n    if (starship) {\n      setStarship(starship);\n      setModal(true);\n    } else {\n      setModal(false);\n    }\n  };\n\n  return (\n    <div>\n      {modal && (\n        <div className={styles.modal} onClick={() => handleModal(null)}>\n          <div className={styles.modalbox}>\n            <h2>{starship.starshipName}</h2>\n            <p>Model: {starship.model}</p>\n            <p>Passengers: {starship.passengers}</p>\n            <p>Pilot: {starship.pilot || 'Need a pilot'}</p>\n          </div>\n        </div>\n      )}\n      <h1>Starships Episode {episode}</h1>\n      <h3>\n        <Link to=\"/\"> Back to the movies </Link>\n      </h3>\n      <ul className={styles.container}>\n        {starships.map(starship => (\n          <li key={starship.starshipId} className={styles.starship}>\n            {starship.starshipName}\n            <span onClick={() => handleModal(starship)}>edit</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nexport default Starships;\n","import React from 'react';\n// mantener la app en una sola pagina\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/home';\nimport Starships from './pages/starships';\nimport background from './assets/124129.jpg';\nimport styles from './App.sass';\n\nconst App = () => {\n  return (\n    <div className={styles.App} style={{ backgroundImage: `url(${background})` }}>\n      <Router>\n        <Switch>\n          {/* decide que componente va renderisar por la ruta  */}\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/starships/:episode\" component={Starships} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.sass';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}